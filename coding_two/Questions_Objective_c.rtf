{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs26 \cf2 Questions:\
1) How might you adapt your code to check for sequences of 3, 4, or more cards from the previous shuffle?\
-The initializer takes in an array of cardValues and an array of suits. This means that the Deck can be initialized to any dimension as long as the values are in the array.\
-the shuffling algorithm uses a variable called numberOfCards which is derived from the count of the array that holds all card positions. Thus changing the size of the deck will be accomodated in the shuffling algorithm as well.\
-The code sets the number of sequences as a variable at initialization. However the method that detects the number of repeated sequences is set to detect from the last 2 shuffles only. This is the method that I would need to change. The change would be to accept an array of NSStrings that contain the shuffle numbers to check within for repeated sequences. The card positions within each shuffle are always stored so implementing this method should not be difficult.\
\
\
2) How might you adapt your code to check for combinations of N cards, rather than sequences?\
-Currently the code in "Deck.m/setUpPredecessorSuccessorGraphForShuffleNumber" sets up a data structure that associates the next "numberSuccessors" to every card position. The code doesn't care about the "type" of cards, just the number. To detect combinations of N cards, the code would need to take into account the "type" of card as well as the number of cards to store as successors in the graph. Once again the data structure is present in the current method, while looping through the card positions array, the code will have to take into account an extra parameter: the type of the card when associating successors.\
\
\
\
\
3) How might you adapt your code to check for card sequences that were present in any previous shuffle? (i.e. comparing against all previous shuffles, not just the most recent one)\
-My code adds to a data structure the card positions after every shuffle of the deck. The data structure basically is a Dictionary for each shuffle. In this dictionary every card is connected to its successor/s Card. All predecessor/successor relationships after every shuffle are preserved in this data structure. Currently only the last 2 shuffles are checked by the method: "Deck.m/getAllRepeatedSequencesInLastTwoShuffles". Thus comparing previous N sequences would mean extending this method to accept an array of previous shuffle numbers that need to be compared. Within this extended method then, the code would have to go into the pre-existing data-structure of predecessor-successor relationships to extract the ones from the relevant shuffle numbers and then sort all predecessors within each shuffle and compare their successors to detect repeats. Once a repeated pair is detected, it would be added to a dictionary data structure with the predecessor-successor values converted to a NSString and stored as kkeys while the values would be the shuffle numbers that contain that particular sequence.\
\
\
\
4) If necessary, how might you change your code to accommodate more than 4 suits, or more than 13 different card values.\
My Deck class creates the Deck based on variables passed into the initializer. The initializer looks like this "-(id)initWithSuits:(NSArray*)suitsArray numberOfCardValues:(NSArray*)cardValues" and the number of suits and number of card values are variables passed in as NSArrays. So long as the suits and values are present in the array parameters the deck can accomodate any dimension. \
\
\
5) Would you do things any differently if you were optimizing purely for speed? How about if you were trying to minimize memory usage?\
-My initial implementation of the shuffle algorithm used 2 random numbers and was the method "Deck.m/shuffleDeckAlgorithmTwoRandomNumbers". Here the first random number was to get an index number in the non-shuffled deck, pick a card and then the second random number would be to get an index number in the destination "shuffled" deck to insert the card into. This approach while maximizes randomness also results in more collisions as the number of available index spots in the destination array becomes smaller and smaller. Thus it takes longer and longer to find a true "random" index to insert into. This meant that the algorithm though randomized would theoretically run forever given a log enough array. In order to optimize for time, I added a second shuffling algorithm with just 1 random number and tested out the run times for both algorithms to see which one ran faster. I also tested to see if there was 1 algorithm that was more random than another and good at avoiding repeated sequences. In other words, I was testing to see which algorithm takes less shuffles to reach 0 repeated sequences. I found that based on empirical observations there was no obvious advantage to having 2 random numbers in terms of speed or randomness. Both algorithms achieve the task without significant differences. \
If I were to optimize further for speed I would try to reduce the number of dictionary data structures used and instead opt for Arrays. this would improve localize data storage on the disc and would mean improved read-write times as well as less thrashing. However, premature optimization of code is not really a good approach. I would performance test segments of the code and see where the bottlenecks are before making further optimizations for speed. There is a fine tradeoff between, speed, memory usage and code readibility/maintenance/extensibility when making design decisions and all aspects need to be considered given a scenario. \
To minimize memory usage, I would use fewer data structures to store precomputed values and reduce storage. Instead I would write more code to compute and piece together data structures on demand by methods. So for example I would construct the graph of the predecessors and successors on demand, I would store fewer string values and use bit values to store information.}